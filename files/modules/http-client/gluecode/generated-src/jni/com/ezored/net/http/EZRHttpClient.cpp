// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/ezored/net/http/EZRHttpClient.hpp" // my header
#include "com/ezored/net/http/EZRHttpClientLogger.hpp"
#include "com/ezored/net/http/EZRHttpClientPlatformService.hpp"
#include "com/ezored/net/http/EZRHttpRequest.hpp"
#include "com/ezored/net/http/EZRHttpResponse.hpp"
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated
{

EZRHttpClient::EZRHttpClient() : ::djinni::JniInterface<::ezored::net::http::HttpClient, EZRHttpClient>("com/ezored/net/http/HttpClient$CppProxy") {}

EZRHttpClient::~EZRHttpClient() = default;

CJNIEXPORT void JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_nativeDestroy(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ezored::net::http::HttpClient> *>(nativeRef);
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_shared(JNIEnv *jniEnv, jobject /*this*/)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ezored::net::http::HttpClient::shared();
        return ::djinni::release(::djinni_generated::EZRHttpClient::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1setPlatformService(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef, jobject j_ps)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        ref->setPlatformService(::djinni_generated::EZRHttpClientPlatformService::toCpp(jniEnv, j_ps));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1getPlatformService(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        auto r = ref->getPlatformService();
        return ::djinni::release(::djinni_generated::EZRHttpClientPlatformService::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1hasPlatformService(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        auto r = ref->hasPlatformService();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1doRequest(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef, jobject j_request)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        auto r = ref->doRequest(::djinni_generated::EZRHttpRequest::toCpp(jniEnv, j_request));
        return ::djinni::release(::djinni_generated::EZRHttpResponse::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1setLogger(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef, jobject j_logger)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        ref->setLogger(::djinni_generated::EZRHttpClientLogger::toCpp(jniEnv, j_logger));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1getLogger(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        auto r = ref->getLogger();
        return ::djinni::release(::djinni_generated::EZRHttpClientLogger::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_ezored_net_http_HttpClient_00024CppProxy_native_1hasLogger(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::net::http::HttpClient>(nativeRef);
        auto r = ref->hasLogger();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
