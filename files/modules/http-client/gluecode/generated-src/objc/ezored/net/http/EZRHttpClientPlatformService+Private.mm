// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIObjcWrapperCache+Private.h"
#import "ezored/net/http/EZRHttpClientPlatformService+Private.h"
#import "ezored/net/http/EZRHttpClientPlatformService.h"
#import "ezored/net/http/EZRHttpRequest+Private.h"
#import "ezored/net/http/EZRHttpResponse+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRHttpClientPlatformServiceCppProxy : NSObject <EZRHttpClientPlatformService>

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpClientPlatformService> &)cppRef;

@end

@implementation EZRHttpClientPlatformServiceCppProxy
{
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ezored::net::http::HttpClientPlatformService>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpClientPlatformService> &)cppRef
{
    if (self = [super init])
    {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull EZRHttpResponse *)doRequest:(nonnull EZRHttpRequest *)request
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->doRequest(::djinni_generated::HttpRequest::toCpp(request));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated
{

class HttpClientPlatformService::ObjcProxy final
    : public ::ezored::net::http::HttpClientPlatformService,
      private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::HttpClientPlatformService;

public:
    using ObjcProxyBase::ObjcProxyBase;
    ::ezored::net::http::HttpResponse doRequest(const ::ezored::net::http::HttpRequest &c_request) override
    {
        @autoreleasepool
        {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() doRequest:(::djinni_generated::HttpRequest::fromCpp(c_request))];
            return ::djinni_generated::HttpResponse::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated
{

auto HttpClientPlatformService::toCpp(ObjcType objc) -> CppType
{
    if (!objc)
    {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[EZRHttpClientPlatformServiceCppProxy class]])
    {
        return ((EZRHttpClientPlatformServiceCppProxy *)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto HttpClientPlatformService::fromCppOpt(const CppOptType &cpp) -> ObjcType
{
    if (!cpp)
    {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy *>(cpp.get()))
    {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<::EZRHttpClientPlatformServiceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
