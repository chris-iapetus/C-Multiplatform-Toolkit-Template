// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "ezored/net/http/EZRHttpClientLogger+Private.h"
#import "ezored/net/http/EZRHttpClientLogger.h"
#import "ezored/net/http/EZRHttpRequest+Private.h"
#import "ezored/net/http/EZRHttpResponse+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRHttpClientLogger ()

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpClientLogger> &)cppRef;

@end

@implementation EZRHttpClientLogger
{
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ezored::net::http::HttpClientLogger>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpClientLogger> &)cppRef
{
    if (self = [super init])
    {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onRequest:(nonnull EZRHttpRequest *)request
{
    try
    {
        _cppRefHandle.get()->onRequest(::djinni_generated::HttpRequest::toCpp(request));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onResponse:(nonnull EZRHttpRequest *)request
          response:(nonnull EZRHttpResponse *)response
{
    try
    {
        _cppRefHandle.get()->onResponse(::djinni_generated::HttpRequest::toCpp(request),
                                        ::djinni_generated::HttpResponse::toCpp(response));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated
{

auto HttpClientLogger::toCpp(ObjcType objc) -> CppType
{
    if (!objc)
    {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpClientLogger::fromCppOpt(const CppOptType &cpp) -> ObjcType
{
    if (!cpp)
    {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::EZRHttpClientLogger>(cpp);
}

} // namespace djinni_generated

@end
