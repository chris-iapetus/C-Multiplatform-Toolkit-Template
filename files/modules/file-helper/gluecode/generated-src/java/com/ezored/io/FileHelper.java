// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

package com.ezored.io;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class FileHelper {
    public abstract void setPlatformService(FileHelperPlatformService ps);

    public abstract FileHelperPlatformService getPlatformService();

    public abstract boolean hasPlatformService();

    public static FileHelper shared()
    {
        return CppProxy.shared();
    }

    public static boolean createFile(String path)
    {
        return CppProxy.createFile(path);
    }

    public static boolean createFileWithStringContent(String path, String content)
    {
        return CppProxy.createFileWithStringContent(path,
                                                    content);
    }

    public static boolean createFileWithBinaryContent(String path, byte[] content)
    {
        return CppProxy.createFileWithBinaryContent(path,
                                                    content);
    }

    public static boolean createDir(String path)
    {
        return CppProxy.createDir(path);
    }

    public static ArrayList<String> listFiles(String path)
    {
        return CppProxy.listFiles(path);
    }

    public static String getExtension(String path)
    {
        return CppProxy.getExtension(path);
    }

    public static String getFilename(String path)
    {
        return CppProxy.getFilename(path);
    }

    public static String getBasename(String path)
    {
        return CppProxy.getBasename(path);
    }

    public static String getFilenameFromUrl(String url)
    {
        return CppProxy.getFilenameFromUrl(url);
    }

    public static String getBasenameFromUrl(String url)
    {
        return CppProxy.getBasenameFromUrl(url);
    }

    public static boolean removeFile(String path)
    {
        return CppProxy.removeFile(path);
    }

    public static boolean removeDir(String path)
    {
        return CppProxy.removeDir(path);
    }

    public static boolean isDir(String path)
    {
        return CppProxy.isDir(path);
    }

    public static boolean isFile(String path)
    {
        return CppProxy.isFile(path);
    }

    public static long getFileSize(String path)
    {
        return CppProxy.getFileSize(path);
    }

    public static boolean copyFile(String from, String to)
    {
        return CppProxy.copyFile(from,
                                 to);
    }

    public static boolean moveFile(String from, String to)
    {
        return CppProxy.moveFile(from,
                                 to);
    }

    public static String join(String first, String second)
    {
        return CppProxy.join(first,
                             second);
    }

    public static String getFileContentAsString(String path)
    {
        return CppProxy.getFileContentAsString(path);
    }

    public static byte[] getFileContentAsBinary(String path)
    {
        return CppProxy.getFileContentAsBinary(path);
    }

    public static String getHomeDir()
    {
        return CppProxy.getHomeDir();
    }

    private static final class CppProxy extends FileHelper
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setPlatformService(FileHelperPlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, FileHelperPlatformService ps);

        @Override
        public FileHelperPlatformService getPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformService(this.nativeRef);
        }
        private native FileHelperPlatformService native_getPlatformService(long _nativeRef);

        @Override
        public boolean hasPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasPlatformService(this.nativeRef);
        }
        private native boolean native_hasPlatformService(long _nativeRef);

        public static native FileHelper shared();

        public static native boolean createFile(String path);

        public static native boolean createFileWithStringContent(String path, String content);

        public static native boolean createFileWithBinaryContent(String path, byte[] content);

        public static native boolean createDir(String path);

        public static native ArrayList<String> listFiles(String path);

        public static native String getExtension(String path);

        public static native String getFilename(String path);

        public static native String getBasename(String path);

        public static native String getFilenameFromUrl(String url);

        public static native String getBasenameFromUrl(String url);

        public static native boolean removeFile(String path);

        public static native boolean removeDir(String path);

        public static native boolean isDir(String path);

        public static native boolean isFile(String path);

        public static native long getFileSize(String path);

        public static native boolean copyFile(String from, String to);

        public static native boolean moveFile(String from, String to);

        public static native String join(String first, String second);

        public static native String getFileContentAsString(String path);

        public static native byte[] getFileContentAsBinary(String path);

        public static native String getHomeDir();
    }
}
