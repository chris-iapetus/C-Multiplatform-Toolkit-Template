// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/ezored/io/EZRFileHelperPlatformService.hpp" // my header
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated
{

EZRFileHelperPlatformService::EZRFileHelperPlatformService() : ::djinni::JniInterface<::ezored::io::FileHelperPlatformService, EZRFileHelperPlatformService>() {}

EZRFileHelperPlatformService::~EZRFileHelperPlatformService() = default;

EZRFileHelperPlatformService::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) {}

EZRFileHelperPlatformService::JavaProxy::~JavaProxy() = default;

bool EZRFileHelperPlatformService::JavaProxy::createFile(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_createFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::createFileWithStringContent(const std::string &c_path, const std::string &c_content)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_createFileWithStringContent,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_content)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::createFileWithBinaryContent(const std::string &c_path, const std::vector<uint8_t> &c_content)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_createFileWithBinaryContent,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                                          ::djinni::get(::djinni::Binary::fromCpp(jniEnv, c_content)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::createDir(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_createDir,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
std::vector<std::string> EZRFileHelperPlatformService::JavaProxy::listFiles(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_listFiles,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::List<::djinni::String>::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getExtension(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getExtension,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getFilename(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFilename,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getBasename(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getBasename,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getFilenameFromUrl(const std::string &c_url)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFilenameFromUrl,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getBasenameFromUrl(const std::string &c_url)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getBasenameFromUrl,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::removeFile(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_removeFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::removeDir(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_removeDir,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::isDir(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isDir,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::isFile(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
int64_t EZRFileHelperPlatformService::JavaProxy::getFileSize(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getFileSize,
                                       ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::copyFile(const std::string &c_from, const std::string &c_to)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_copyFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_from)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_to)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool EZRFileHelperPlatformService::JavaProxy::moveFile(const std::string &c_from, const std::string &c_to)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_moveFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_from)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_to)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::join(const std::string &c_first, const std::string &c_second)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_join,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_first)),
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_second)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getFileContentAsString(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFileContentAsString,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::vector<uint8_t> EZRFileHelperPlatformService::JavaProxy::getFileContentAsBinary(const std::string &c_path)
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jbyteArray)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFileContentAsBinary,
                                                     ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Binary::toCpp(jniEnv, jret);
}
std::string EZRFileHelperPlatformService::JavaProxy::getHomeDir()
{
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto &data = ::djinni::JniClass<::djinni_generated::EZRFileHelperPlatformService>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getHomeDir);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}

} // namespace djinni_generated
