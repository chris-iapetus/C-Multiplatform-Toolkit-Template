// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "ezored/util/EZRLogger+Private.h"
#import "ezored/util/EZRLogger.h"
#import "ezored/util/EZRLoggerLevel+Private.h"
#import "ezored/util/EZRLoggerPlatformService+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRLogger ()

- (id)initWithCpp:(const std::shared_ptr<::ezored::util::Logger> &)cppRef;

@end

@implementation EZRLogger
{
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ezored::util::Logger>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ezored::util::Logger> &)cppRef
{
    if (self = [super init])
    {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable EZRLogger *)shared
{
    try
    {
        auto objcpp_result_ = ::ezored::util::Logger::shared();
        return ::djinni_generated::Logger::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPlatformService:(nullable id<EZRLoggerPlatformService>)ps
{
    try
    {
        _cppRefHandle.get()->setPlatformService(::djinni_generated::LoggerPlatformService::toCpp(ps));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<EZRLoggerPlatformService>)getPlatformService
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->getPlatformService();
        return ::djinni_generated::LoggerPlatformService::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasPlatformService
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->hasPlatformService();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)allowedLevel:(EZRLoggerLevel)level
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->allowedLevel(::djinni::Enum<::ezored::util::LoggerLevel, EZRLoggerLevel>::toCpp(level));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLevel:(EZRLoggerLevel)level
{
    try
    {
        _cppRefHandle.get()->setLevel(::djinni::Enum<::ezored::util::LoggerLevel, EZRLoggerLevel>::toCpp(level));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)v:(nonnull NSString *)message
{
    try
    {
        ::ezored::util::Logger::v(::djinni::String::toCpp(message));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)d:(nonnull NSString *)message
{
    try
    {
        ::ezored::util::Logger::d(::djinni::String::toCpp(message));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)i:(nonnull NSString *)message
{
    try
    {
        ::ezored::util::Logger::i(::djinni::String::toCpp(message));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)w:(nonnull NSString *)message
{
    try
    {
        ::ezored::util::Logger::w(::djinni::String::toCpp(message));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)e:(nonnull NSString *)message
{
    try
    {
        ::ezored::util::Logger::e(::djinni::String::toCpp(message));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setGroup:(nonnull NSString *)group
{
    try
    {
        ::ezored::util::Logger::setGroup(::djinni::String::toCpp(group));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated
{

auto Logger::toCpp(ObjcType objc) -> CppType
{
    if (!objc)
    {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Logger::fromCppOpt(const CppOptType &cpp) -> ObjcType
{
    if (!cpp)
    {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::EZRLogger>(cpp);
}

} // namespace djinni_generated

@end
