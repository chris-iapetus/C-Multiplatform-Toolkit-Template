// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/jni/djinni_support.hpp"
#include "ezored/util/LoggerPlatformService.hpp"

namespace djinni_generated
{

class EZRLoggerPlatformService final : ::djinni::JniInterface<::ezored::util::LoggerPlatformService, EZRLoggerPlatformService>
{
public:
    using CppType = std::shared_ptr<::ezored::util::LoggerPlatformService>;
    using CppOptType = std::shared_ptr<::ezored::util::LoggerPlatformService>;
    using JniType = jobject;

    using Boxed = EZRLoggerPlatformService;

    ~EZRLoggerPlatformService();

    static CppType toCpp(JNIEnv *jniEnv, JniType j) { return ::djinni::JniClass<EZRLoggerPlatformService>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv *jniEnv, const CppOptType &c) { return {jniEnv, ::djinni::JniClass<EZRLoggerPlatformService>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv *jniEnv, const CppType &c) { return fromCppOpt(jniEnv, c); }

private:
    EZRLoggerPlatformService();
    friend ::djinni::JniClass<EZRLoggerPlatformService>;
    friend ::djinni::JniInterface<::ezored::util::LoggerPlatformService, EZRLoggerPlatformService>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ezored::util::LoggerPlatformService
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void v(const std::string &message) override;
        void d(const std::string &message) override;
        void i(const std::string &message) override;
        void w(const std::string &message) override;
        void e(const std::string &message) override;
        void setGroup(const std::string &group) override;

    private:
        friend ::djinni::JniInterface<::ezored::util::LoggerPlatformService, ::djinni_generated::EZRLoggerPlatformService>;
    };

    const ::djinni::GlobalRef<jclass> clazz{::djinni::jniFindClass("com/ezored/util/LoggerPlatformService")};
    const jmethodID method_v{::djinni::jniGetMethodID(clazz.get(), "v", "(Ljava/lang/String;)V")};
    const jmethodID method_d{::djinni::jniGetMethodID(clazz.get(), "d", "(Ljava/lang/String;)V")};
    const jmethodID method_i{::djinni::jniGetMethodID(clazz.get(), "i", "(Ljava/lang/String;)V")};
    const jmethodID method_w{::djinni::jniGetMethodID(clazz.get(), "w", "(Ljava/lang/String;)V")};
    const jmethodID method_e{::djinni::jniGetMethodID(clazz.get(), "e", "(Ljava/lang/String;)V")};
    const jmethodID method_setGroup{::djinni::jniGetMethodID(clazz.get(), "setGroup", "(Ljava/lang/String;)V")};
};

} // namespace djinni_generated
