// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "ezored/net/http/EZRHttpServer+Private.h"
#import "ezored/net/http/EZRHttpServer.h"
#import "ezored/net/http/EZRHttpServerConfig+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRHttpServer ()

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpServer> &)cppRef;

@end

@implementation EZRHttpServer
{
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ezored::net::http::HttpServer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ezored::net::http::HttpServer> &)cppRef
{
    if (self = [super init])
    {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable EZRHttpServer *)shared
{
    try
    {
        auto objcpp_result_ = ::ezored::net::http::HttpServer::shared();
        return ::djinni_generated::HttpServer::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)initialize:(nonnull EZRHttpServerConfig *)config
{
    try
    {
        _cppRefHandle.get()->initialize(::djinni_generated::HttpServerConfig::toCpp(config));
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EZRHttpServerConfig *)getConfig
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->getConfig();
        return ::djinni_generated::HttpServerConfig::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)start
{
    try
    {
        _cppRefHandle.get()->start();
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stop
{
    try
    {
        _cppRefHandle.get()->stop();
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)waitForTermination
{
    try
    {
        _cppRefHandle.get()->waitForTermination();
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSocketPort
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketPort();
        return ::djinni::I32::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSocketHost
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketHost();
        return ::djinni::String::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSocketAddress
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketAddress();
        return ::djinni::String::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isSocketSecure
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->isSocketSecure();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isRunning
{
    try
    {
        auto objcpp_result_ = _cppRefHandle.get()->isRunning();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated
{

auto HttpServer::toCpp(ObjcType objc) -> CppType
{
    if (!objc)
    {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpServer::fromCppOpt(const CppOptType &cpp) -> ObjcType
{
    if (!cpp)
    {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::EZRHttpServer>(cpp);
}

} // namespace djinni_generated

@end
