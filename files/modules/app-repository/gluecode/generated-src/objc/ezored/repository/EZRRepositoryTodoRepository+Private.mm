// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "ezored/domain/EZRDomainTodo+Private.h"
#import "ezored/repository/EZRRepositoryTodoRepository+Private.h"
#import "ezored/repository/EZRRepositoryTodoRepository.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EZRRepositoryTodoRepository ()

- (id)initWithCpp:(const std::shared_ptr<::ezored::repository::TodoRepository> &)cppRef;

@end

@implementation EZRRepositoryTodoRepository
{
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ezored::repository::TodoRepository>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ezored::repository::TodoRepository> &)cppRef
{
    if (self = [super init])
    {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)truncate
{
    try
    {
        ::ezored::repository::TodoRepository::truncate();
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull EZRDomainTodo *)findById:(int64_t)id
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::findById(::djinni::I64::toCpp(id));
        return ::djinni_generated::Todo::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSArray<EZRDomainTodo *> *)findAllOrderByCreatedAtDesc
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::findAllOrderByCreatedAtDesc();
        return ::djinni::List<::djinni_generated::Todo>::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSArray<EZRDomainTodo *> *)findByTitle:(nonnull NSString *)title
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::findByTitle(::djinni::String::toCpp(title));
        return ::djinni::List<::djinni_generated::Todo>::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)removeById:(int64_t)id
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::removeById(::djinni::I64::toCpp(id));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int64_t)update:(int64_t)id
             todo:(nonnull EZRDomainTodo *)todo
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::update(::djinni::I64::toCpp(id),
                                                                           ::djinni_generated::Todo::toCpp(todo));
        return ::djinni::I64::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int64_t)insert:(nonnull EZRDomainTodo *)todo
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::insert(::djinni_generated::Todo::toCpp(todo));
        return ::djinni::I64::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int64_t)add:(nonnull EZRDomainTodo *)todo
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::add(::djinni_generated::Todo::toCpp(todo));
        return ::djinni::I64::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)setDoneById:(int64_t)id
               done:(BOOL)done
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::setDoneById(::djinni::I64::toCpp(id),
                                                                                ::djinni::Bool::toCpp(done));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int64_t)count
{
    try
    {
        auto objcpp_result_ = ::ezored::repository::TodoRepository::count();
        return ::djinni::I64::fromCpp(objcpp_result_);
    }
    DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated
{

auto TodoRepository::toCpp(ObjcType objc) -> CppType
{
    if (!objc)
    {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto TodoRepository::fromCppOpt(const CppOptType &cpp) -> ObjcType
{
    if (!cpp)
    {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::EZRRepositoryTodoRepository>(cpp);
}

} // namespace djinni_generated

@end
