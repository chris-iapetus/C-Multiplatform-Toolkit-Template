// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/ezored/core/EZRCoreApplicationCore.hpp" // my header
#include "com/ezored/domain/EZRDomainCustomer.hpp"
#include "com/ezored/domain/EZRDomainDeviceData.hpp"
#include "com/ezored/domain/EZRDomainInitializationData.hpp"
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated
{

EZRCoreApplicationCore::EZRCoreApplicationCore() : ::djinni::JniInterface<::ezored::core::ApplicationCore, EZRCoreApplicationCore>("com/ezored/core/ApplicationCore$CppProxy") {}

EZRCoreApplicationCore::~EZRCoreApplicationCore() = default;

CJNIEXPORT void JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_nativeDestroy(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ezored::core::ApplicationCore> *>(nativeRef);
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_shared(JNIEnv *jniEnv, jobject /*this*/)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ezored::core::ApplicationCore::shared();
        return ::djinni::release(::djinni_generated::EZRCoreApplicationCore::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1initialize(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::EZRDomainInitializationData::JniType j_initializationData, ::djinni_generated::EZRDomainDeviceData::JniType j_deviceData)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        ref->initialize(::djinni_generated::EZRDomainInitializationData::toCpp(jniEnv, j_initializationData),
                        ::djinni_generated::EZRDomainDeviceData::toCpp(jniEnv, j_deviceData));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT ::djinni_generated::EZRDomainInitializationData::JniType JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1getInitializationData(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        auto r = ref->getInitializationData();
        return ::djinni::release(::djinni_generated::EZRDomainInitializationData::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT ::djinni_generated::EZRDomainDeviceData::JniType JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1getDeviceData(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        auto r = ref->getDeviceData();
        return ::djinni::release(::djinni_generated::EZRDomainDeviceData::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT ::djinni_generated::EZRDomainCustomer::JniType JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1getCustomer(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        auto r = ref->getCustomer();
        return ::djinni::release(::djinni_generated::EZRDomainCustomer::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1setCustomer(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::EZRDomainCustomer::JniType j_customer)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        ref->setCustomer(::djinni_generated::EZRDomainCustomer::toCpp(jniEnv, j_customer));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_ezored_core_ApplicationCore_00024CppProxy_native_1getVersion(JNIEnv *jniEnv, jobject /*this*/, jlong nativeRef)
{
    try
    {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto &ref = ::djinni::objectFromHandleAddress<::ezored::core::ApplicationCore>(nativeRef);
        auto r = ref->getVersion();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    }
    JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
